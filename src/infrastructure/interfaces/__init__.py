"""基础设施层接口定义模块

定义跨模块使用的抽象接口，避免循环依赖
"""

from typing import Protocol, Any, Dict, Optional, List
import logging
from datetime import datetime

class IConfigManager(Protocol):
    """配置管理接口"""
    def get(self, key: str, default: Any = None) -> Any: ...
    def update(self, config: Dict[str, Any]) -> None: ...
    def watch(self, key: str, callback: Any) -> None: ...

class ILogManager(Protocol):
    """日志管理接口"""
    def get_logger(self, name: str) -> logging.Logger: ...
    def configure(self, config: Dict[str, Any]) -> None: ...

class ICacheManager(Protocol):
    """缓存管理接口"""
    def get(self, key: str) -> Optional[Any]: ...
    def set(self, key: str, value: Any, ttl: Optional[int] = None) -> None: ...
    def delete(self, key: str) -> None: ...
    def clear(self) -> None: ...
    def exists(self, key: str) -> bool: ...

class IVersionManager(Protocol):
    """版本管理接口"""
    def add_version(self, env: str, config: Dict[str, Any], author: str, comment: str = "") -> str: ...
    def get_versions(self, env: str) -> List[Dict[str, Any]]: ...
    def get_version(self, env: str, version: str) -> Optional[Dict[str, Any]]: ...
    def restore_version(self, env: str, version: str) -> bool: ...
    def validate_version(self, version_data: Dict[str, Any]) -> bool: ...
